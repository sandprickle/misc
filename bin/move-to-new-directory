#!/usr/bin/env bash

# Filename:      move-to-new-directory
# Description:   Moves all given files to a new folder
# Maintainer:    Jeremy Cantrell <jmcantrell@gmail.com>
# Last Modified: Sat 2011-06-04 17:17:13 (-0400)

# While this can be used at the command line, it was intended to be used
# within nautilus using either the scripts folder or nautilus-actions.
#
# I've often found myself creating a new directory, naming it, then moving a
# bunch of files into it. This changes that workflow to simply selecting a
# bunch of files, invoking the script and giving it the name of a directory.
# It may not be immediately obvious how, but this script has saved me an
# immense amount of time.

source bashful-messages
source bashful-modes
source bashful-zenity

SCRIPT_NAME=$(basename "$0")
SCRIPT_ARGUMENTS="[FILE...]"
SCRIPT_USAGE="Creates a new directory and moves all given files into it"

interactive ${INTERACTIVE:-1}
verbose     ${VERBOSE:-1}

unset OPTIND
while getopts ":hifvqd:" option; do
    case $option in
        d) directory=$OPTARG ;;
        i) interactive 1 ;;
        f) interactive 0 ;;
        v) verbose 1 ;;
        q) verbose 0 ;;
        h) usage 0 ;;
        *) usage 1 ;;
    esac
done && shift $(($OPTIND - 1))

(( $# == 0 )) && exit 1

if (( $# > 1 )); then
    # If more than one file given, get the common prefix...
    common=$(
        for f in "$@"; do
            basename "$f"
        done | commonprefix
        )
else
    # ... otherwise, just take the first word in the file.
    common=${1%% *}
fi

if [[ ! $directory ]]; then
    name=$(input_zenity -d "$(trim <<<"$common")" -p "Enter directory") || exit 1
    directory=$PWD/$name
else
    name=$(basename "$directory")
fi

[[ $directory ]] || die "No directory provided"

mkdir -p "$directory"

if [[ -d $directory ]]; then
    # This will remove the name of the container directory from the beginning
    # of each file. This is the most common scenario that I use.
    if question_zenity -p "Strip common?"; then
        for f in "$@"; do
            new_f=$(basename "$f")
            new_f=$(trim <<<"${new_f#$name}")
            mv -nv "$f" "$directory/$new_f"
        done
    else
        mv -nv "$@" "$directory"
    fi
fi
